
def binhphuong(a,k,n):
    b=1
    if k==0:
        return b
    A=a
    k_bin=bin(k)[2:]
    t=len(k_bin)
    if k_bin[-1]=='1':
        b=a 
    for i in range(1,t):
        A=(A*A)%n
        if k_bin[-1-i]=='1':
            b=(b*A)%n
    return b

def Miller(n,r,a,j_max,t=5):
    s=0
    h=n-1
    while h%2==0:
        s+=1
        h//=2
    if j_max> s-1:
        print("Too many steps")
        return 
    y=binhphuong(a,r,n)
    j=1
    while j<=j_max and y!=n-1:
        y=binhphuong(y,2,n)
        if y==1:
            break
        j+=1
            
    print(y)

def main():
    n=int(input('nhap n: '))
    r=int(input('nhap r: '))
    a=int(input('nhap a: '))
    j_max=int(input('nhap j_max: '))
    Miller(n,r,a,j_max)

if __name__=='__main__':
    main()
